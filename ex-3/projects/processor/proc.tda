// @lang=tda @ts=2

module proc_property_suite(reset,clk, IR, REG_FILE,CONTROL_STATE,
dataIn, writeEnable, dataOut,dataAddr,instrAddr,instrIn);

input logic reset;
input logic clk;
input logic [15:0] IR;
input logic [7:0][7:0] REG_FILE;
input logic [2:0] CONTROL_STATE;
input logic [7:0] dataIn;
input logic writeEnable;
input logic [7:0] dataOut;
input logic [7:0] dataAddr;
input logic [15:0] instrAddr;
input logic [15:0] instrIn;

parameter c_IF  = 3'b001;
parameter c_ID  = 3'b010;
parameter c_EX  = 3'b011;
parameter c_MEM = 3'b100;
parameter c_WB  = 3'b101;

parameter c_ALU_REG = 4'b0001;

parameter c_ADD_IMM = 4'b0010;
parameter c_OR_IMM  = 4'b0011;

parameter c_LOAD    = 4'b0100;
parameter c_STORE   = 4'b0101;

parameter c_JUMP    = 4'b0110;
parameter c_BRANCH  = 4'b0111;

parameter c_ADD     = 3'b001;
parameter c_OR      = 3'b010;

// sequence definition for SVA property

`define true 1

`include "tidal.sv"

`begin_tda(ops)

// sequence definition for TiDAL property

// your operational properties
property p_or_imm;
	logic [2:0] rs1;
	logic [2:0] rd;
	logic [7:0] imm_ext;
	logic [7:0] contents_rs1;
	logic [7:0] contents_rd;

	t ##0 set_freeze(rs1, instrIn[11:9]) and
	t ##0 set_freeze(rd, instrIn[8:6]) and
	t ##0 set_freeze(imm_ext, {instrIn[5], instrIn[5], instrIn[5:0]}) and
	t ##0 set_freeze(contents_rs1, REG_FILE[rs1]) and
	t ##0 set_freeze(contents_rd, (rd==3'b000)? (REG_FILE[rd]) : (rs1==3'b000)? imm_ext : (contents_rs1 | imm_ext)) and

	t ##0 CONTROL_STATE == c_IF and
	t ##0 instrIn[15:12] == c_OR_IMM

	implies

	t ##1 CONTROL_STATE == c_ID and
	t ##2 CONTROL_STATE == c_EX and
	t ##3 CONTROL_STATE == c_MEM and
	t ##4 CONTROL_STATE == c_WB and
	t ##5 REG_FILE[rd] == contents_rd;
endproperty

property p_add_imm;
	logic [2:0] rs1;
	logic [2:0] rd;
	logic [7:0] imm_ext;
	logic [7:0] contents_rs1;
	logic [7:0] contents_rd;

	t ##0 set_freeze(rs1, instrIn[11:9]) and
	t ##0 set_freeze(rd, instrIn[8:6]) and
	t ##0 set_freeze(imm_ext, {instrIn[5], instrIn[5], instrIn[5:0]}) and
	t ##0 set_freeze(contents_rs1, REG_FILE[rs1]) and
	t ##0 set_freeze(contents_rd, (rd==3'b000)? (REG_FILE[rd]) : (rs1==3'b000)? imm_ext : (contents_rs1 + imm_ext)) and

	t ##0 CONTROL_STATE == c_IF and
	t ##0 instrIn[15:12] == c_ADD_IMM

	implies

	t ##1 CONTROL_STATE == c_ID and
	t ##2 CONTROL_STATE == c_EX and
	t ##3 CONTROL_STATE == c_MEM and
	t ##4 CONTROL_STATE == c_WB and
	t ##5 REG_FILE[rd] == contents_rd;
endproperty

property p_or_reg;
	logic [2:0] rs1;
	logic [2:0] rs2;
	logic [2:0] rd;
	logic [7:0] contents_rs1;
	logic [7:0] contents_rs2;
	logic [7:0] contents_rd;

	t ##0 set_freeze(rs1, instrIn[11:9]) and
	t ##0 set_freeze(rs2, instrIn[8:6]) and
	t ##0 set_freeze(rd, instrIn[5:3]) and
	t ##0 set_freeze(contents_rs1, (rs1==3'b000)? (8'b00000000) : (REG_FILE[rs1])) and
	t ##0 set_freeze(contents_rs2, (rs2==3'b000)? (8'b00000000) : (REG_FILE[rs2])) and
	t ##0 set_freeze(contents_rd, (rd==3'b000)? (REG_FILE[rd]) : (contents_rs1 | contents_rs2)) and

	t ##0 CONTROL_STATE == c_IF and
	t ##0 instrIn[15:12] == c_ALU_REG and
	t ##0 instrIn[2:0] == c_OR

	implies

	t ##1 CONTROL_STATE == c_ID and
	t ##2 CONTROL_STATE == c_EX and
	t ##3 CONTROL_STATE == c_MEM and
	t ##4 CONTROL_STATE == c_WB and
	t ##5 REG_FILE[rd] == contents_rd;
endproperty

property p_add_reg;
	logic [2:0] rs1;
	logic [2:0] rs2;
	logic [2:0] rd;
	logic [7:0] contents_rs1;
	logic [7:0] contents_rs2;
	logic [7:0] contents_rd;

	t ##0 set_freeze(rs1, instrIn[11:9]) and
	t ##0 set_freeze(rs2, instrIn[8:6]) and
	t ##0 set_freeze(rd, instrIn[5:3]) and
	t ##0 set_freeze(contents_rs1, (rs1==3'b000)? (8'b00000000) : (REG_FILE[rs1])) and
	t ##0 set_freeze(contents_rs2, (rs2==3'b000)? (8'b00000000) : (REG_FILE[rs2])) and
	t ##0 set_freeze(contents_rd, (rd==3'b000)? (REG_FILE[rd]) : (contents_rs1 + contents_rs2)) and

	t ##0 CONTROL_STATE == c_IF and
	t ##0 instrIn[15:12] == c_ALU_REG and
	t ##0 instrIn[2:0] == c_ADD

	implies

	t ##1 CONTROL_STATE == c_ID and
	t ##2 CONTROL_STATE == c_EX and
	t ##3 CONTROL_STATE == c_MEM and
	t ##4 CONTROL_STATE == c_WB and
	t ##5 REG_FILE[rd] == contents_rd;
endproperty

property p_load;
	logic [2:0] rs1;
	logic [2:0] rd;
	logic [7:0] contents_rs1;
	logic [7:0] contents_rd;
	logic [7:0] imm_ext;
	logic [7:0] addr;
	logic [7:0] din;

	t ##0 set_freeze(rs1, instrIn[11:9]) and
	t ##0 set_freeze(rd, instrIn[8:6]) and
	t ##0 set_freeze(imm_ext, {instrIn[5], instrIn[5], instrIn[5:0]}) and
	t ##0 set_freeze(contents_rs1, (rs1==3'b000)? (8'b00000000) : (REG_FILE[rs1])) and
	t ##0 set_freeze(addr, contents_rs1 + imm_ext) and

	t ##0 CONTROL_STATE == c_IF and
	t ##0 instrIn[15:12] == c_LOAD and

	t ##3 set_freeze(contents_rd, (rd==3'b000)? (REG_FILE[rd]) : (dataIn))

	implies
	
	t ##0 writeEnable == 1'b0 and
	t ##1 CONTROL_STATE == c_ID and
	t ##1 writeEnable == 1'b0 and
	t ##2 CONTROL_STATE == c_EX and
	t ##2 writeEnable == 1'b0 and
	t ##3 CONTROL_STATE == c_MEM and
	t ##3 writeEnable == 1'b0 and
	t ##3 dataAddr == addr and
	t ##4 CONTROL_STATE == c_WB and
	t ##4 writeEnable == 1'b0 and
	t ##5 REG_FILE[rd] == contents_rd;
endproperty

property p_store;
	logic [2:0] rs1;
	logic [2:0] rs2;
	logic [7:0] contents_rs1;
	logic [7:0] contents_rs2;
	logic [7:0] imm_ext;
	logic [7:0] addr;
	logic [7:0] din;

	t ##0 set_freeze(rs1, instrIn[11:9]) and
	t ##0 set_freeze(rs2, instrIn[8:6]) and
	t ##0 set_freeze(imm_ext, {instrIn[5], instrIn[5], instrIn[5:0]}) and
	t ##0 set_freeze(contents_rs1, (rs1==3'b000)? (8'b00000000) : (REG_FILE[rs1])) and
	t ##0 set_freeze(contents_rs2, (rs2==3'b000)? (8'b00000000) : (REG_FILE[rs2])) and
	t ##0 set_freeze(addr, contents_rs1 + imm_ext) and

	t ##0 CONTROL_STATE == c_IF and
	t ##0 instrIn[15:12] == c_STORE

	implies
	
	t ##0 writeEnable == 1'b0 and
	t ##1 CONTROL_STATE == c_ID and
	t ##1 writeEnable == 1'b0 and
	t ##2 CONTROL_STATE == c_EX and
	t ##2 writeEnable == 1'b0 and
	t ##3 CONTROL_STATE == c_MEM and
	t ##3 writeEnable == 1'b1 and
	t ##3 dataOut == contents_rs2 and
	t ##3 dataAddr == addr and
	t ##4 CONTROL_STATE == c_WB and
	t ##4 writeEnable == 1'b0;
endproperty

property p_jump;
	logic [15:0] offset;
	logic [15:0] prev_pc;

	t ##0 set_freeze(offset, {{4{instrIn[11]}}, instrIn[11:0]}) and
	t ##0 set_freeze(prev_pc, instrAddr) and

	t ##0 CONTROL_STATE == c_IF and
	t ##0 instrIn[15:12] == c_JUMP

	implies

	t ##1 CONTROL_STATE == c_ID and
	t ##2 CONTROL_STATE == c_IF and
	t ##2 instrAddr == prev_pc + offset + 16'd2;
endproperty

property p_branch;
	logic [15:0] offset;
	logic [15:0] new_pc;
	logic [2:0] rs1;
	logic [7:0] contents_rs1;

	t ##0 set_freeze(rs1, instrIn[11:9]) and
	t ##0 set_freeze(contents_rs1, (rs1==3'b000)? (8'b00000000) : (REG_FILE[rs1])) and
	t ##0 set_freeze(offset, {{7{instrIn[8]}}, instrIn[8:0]}) and
	t ##0 set_freeze(new_pc, (contents_rs1==8'b00000000)? (instrAddr + offset + 16'd2) : (instrAddr + 16'd2)) and

	t ##0 CONTROL_STATE == c_IF and
	t ##0 instrIn[15:12] == c_BRANCH

	implies

	t ##1 CONTROL_STATE == c_ID and
	t ##2 CONTROL_STATE == c_IF and
	t ##2 instrAddr == new_pc;
endproperty

// assert your properties
a_or_imm:  	assert property (@(posedge clk) disable iff (reset) p_or_imm  );
a_add_imm: 	assert property (@(posedge clk) disable iff (reset) p_add_imm );
a_or_reg:  	assert property (@(posedge clk) disable iff (reset) p_or_reg  );
a_add_reg: 	assert property (@(posedge clk) disable iff (reset) p_add_reg );
a_load: 	assert property (@(posedge clk) disable iff (reset) p_load    );
a_store: 	assert property (@(posedge clk) disable iff (reset) p_store   );
a_jump: 	assert property (@(posedge clk) disable iff (reset) p_jump    );
a_branch: 	assert property (@(posedge clk) disable iff (reset) p_branch  );

`end_tda

endmodule

// your bind statement

bind proc proc_property_suite inst_proc_property_suite(.*);
